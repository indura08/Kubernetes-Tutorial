Kubernetes architecture is designed to provide a robust, scalable, and reliable system for managing containerized applications. It consists of several key components that work together to orchestrate the deployment, scaling, and operations of application containers across clusters of hosts.


Master Node:
-------------

Manages the Kubernetes cluster and coordinates all activities.

Key components include:

API Server: Serves the Kubernetes API and is the entry point for all REST commands used to control the cluster.

etcd: A distributed key-value store that Kubernetes uses to store all cluster data.

Controller Manager: Runs controllers, which regulate the state of the cluster (e.g., managing nodes, pods, endpoints).

Scheduler: Assigns newly created pods to nodes based on resource availability

Worker Nodes:
-------------

These nodes run the actual application workloads.

Key components include:

Kubelet: An agent that ensures the containers in Pods are running as expected.
Container Runtime: Software responsible for running containers (e.g., Docker, containerd).
Kube-Proxy: Maintains network rules on nodes and enables network communication to Pods.
Pods: The smallest deployable units in Kubernetes that can contain one or more containers.


Master Node Components:
-----------------------

API Server:

Central control point for all operations.
Receives REST commands and updates the state in etcd.
Acts as the gateway to the cluster.
etcd:

Stores the configuration data and the state of the cluster.
Provides consistent and reliable storage.
Controller Manager:

Includes several controller functions (e.g., node controller, replication controller, endpoints controller).
Ensures that the clusterâ€™s desired state matches its current state.
Scheduler:

Monitors resource usage and places Pods on appropriate nodes based on their requirements and resource availability.


Worker Node Components:
-----------------------
Kubelet:

Ensures containers are running as specified.
Communicates with the API Server to fetch and execute Pod specifications. kubelet interacts with both the container and node

Container Runtime:

Responsible for pulling container images from a registry and running them.
Examples include Docker and containerd.

Kube-Proxy:

Manages network rules to allow communication to Pods from inside or outside the cluster.
Handles routing and load balancing.

Pods:

The smallest and simplest Kubernetes objects.
Encapsulates one or more containers, storage resources, a unique network IP, and options that govern how the container(s) should run.

diagram
-------

+------------------------+
|        Master Node     |
|                        |
|  +------------------+  |
|  |   API Server     |  |
|  +------------------+  |
|  +------------------+  |
|  |     etcd         |  |
|  +------------------+  |
|  +------------------+  |
|  |Controller Manager|  |
|  +------------------+  |
|  +------------------+  |
|  |    Scheduler     |  |
|  +------------------+  |
+------------------------+
           |
           |
           v
+------------------------+     +------------------------+
|      Worker Node 1     |     |      Worker Node 2     |
|                        |     |                        |
|  +------------------+  |     |  +------------------+  |
|  |     Kubelet      |  |     |  |     Kubelet      |  |
|  +------------------+  |     |  +------------------+  |
|  +------------------+  |     |  +------------------+  |
|  |  Kube-Proxy      |  |     |  |  Kube-Proxy      |  |
|  +------------------+  |     |  +------------------+  |
|  +------------------+  |     |  +------------------+  |
|  |    Container     |  |     |  |    Container     |  |
|  |     Runtime      |  |     |  |     Runtime      |  |
|  +------------------+  |     |  +------------------+  |
|  +------------------+  |     |  +------------------+  |
|  |       Pod        |  |     |  |       Pod        |  |
|  +------------------+  |     |  +------------------+  |
+------------------------+     +------------------------+
